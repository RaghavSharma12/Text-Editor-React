{"version":3,"sources":["components/NavBar.js","components/TextBox.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","className","mode","href","title","type","id","aboutText","onClick","toggleMode","htmlFor","TextBox","useState","text","setText","style","color","heading","value","rows","onChange","event","target","backgroundColor","disabled","length","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","filter","element","About","myStyle","Alert","height","alert","role","word","lower","charAt","slice","capitalize","message","defaultProps","App","setMode","setAlert","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5bb54e58.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {Link} from \"react-router-dom\";\r\n\r\nexport default function NavBar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" aria-current=\"page\" href=\"/\">Home</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n              </li> \r\n               {/* <li className=\"nav-item\"> \r\n                <Link className=\"nav-link\" to=\"/docs\">Docs</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/contact\">Contact Us</Link>\r\n              </li> */}\r\n\r\n            </ul>\r\n              {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n            </form>   */}\r\n            <div className={`form-check form-switch text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n              <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nNavBar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired\r\n}\r\nNavBar.defaultProps = {\r\n  title: \"raghav's app\",\r\n  aboutText: \"this is my about page\"\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function TextBox(props) {\r\n    const [text, setText] = useState(\"\");\r\n\r\n    function uppercaseClick() {\r\n\r\n        var newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Upper Case !\",\"success\");\r\n    }\r\n    \r\n    \r\n    function lowercaseClick() {\r\n        \r\n        var newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lower Case !\",\"success\");\r\n    }\r\n    \r\n    \r\n    function clearClick() {\r\n        \r\n        var newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Cleared all text !\",\"success\");\r\n    }\r\n    \r\n    \r\n    function copyClick() {\r\n        \r\n        var newText = document.getElementById(\"myBox\");\r\n        newText.select();\r\n        navigator.clipboard.writeText(newText.value);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"All items Copied on clipboard !\",\"success\");\r\n        \r\n    }\r\n    \r\n    \r\n    function extaSpacesClick() {\r\n        \r\n        var newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"All Extra spaces removed !\",\"success\");\r\n        \r\n\r\n    }\r\n\r\n\r\n    // toggleClick = () => {\r\n    //     let a = text.toLowerCase()\r\n    //     if (a = text) {\r\n    //         var upText = text.toUpperCase();\r\n    //         setText(upText);\r\n    //     }\r\n    //     else {\r\n    //         let newText = text.tolowerCase();\r\n    //         setText(newText);\r\n    //     }\r\n    // }\r\n    \r\n    function handleOnChange(event) {\r\n\r\n        setText(event.target.value);\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"form-floating\">\r\n                <div className=\"mb-3 my-4\">\r\n                    <label htmlFor=\"myBox\" className=\"form-label\" style={{color: props.mode===\"dark\"?\"white\":\"#042743\"  }} ><h2><b>{props.heading}</b></h2></label>\r\n                    <textarea className=\"form-control\" value={text} id=\"myBox\" rows=\"10\" onChange={handleOnChange} style={{backgroundColor: props.mode===\"dark\"?\"#13466e\":\"white\",color:props.mode===\"dark\"?\"white\":\"#042743\" }}></textarea>\r\n                </div>\r\n                <button disabled={text.length===0} className=\"btn btn-primary my-2 mx-2\" onClick={uppercaseClick} >Change to Upper-Case</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary my-2 mx-2\" onClick={lowercaseClick} >Change to Lower-Case</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary my-2 mx-2\" onClick={clearClick} >Clear</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary my-2 mx-2\" onClick={copyClick} >Copy Text</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary my-2 mx-2\" onClick={extaSpacesClick} >Remove Extra Spaces</button>\r\n                {/* <button className=\"btn btn-primary my-2 mx-2\" onClick={toggleClick} >Toggle-Case</button> */}\r\n            </div>\r\n            <div className=\"container my-4\" style={{color: props.mode===\"dark\"?\"white\":\"#042743\"  }}>\r\n                <h3>Text Summary</h3>\r\n                <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes will take to read this</p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length>0?text:\"Nothing to Preview :(\"}</p>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","        // import React, { useState } from 'react'\r\n        import React from 'react'\r\n\r\n\r\n        export default function About(props) {\r\n            let myStyle={\r\n                color:props.mode===\"dark\"?\"white\":\"#042743\",\r\n                backgroundColor:props.mode===\"dark\"?\"#042743\":\"white\",\r\n                // border:\"2px solid \",\r\n                // borderColor:props.mode===\"dark\"?\"white\":\"#042743\",\r\n            }\r\n            // const  [myStyle,setMyStyle] = useState(\r\n            //     {\r\n            //         color: \"black\",\r\n            //         backgroundColor: \"white\"\r\n            //     }\r\n            // )\r\n            // const [btnText,setbtnText] = useState(\"Enable Dark Mode\")\r\n            // const toggleStyle = () => {\r\n            //     if (myStyle.color === \"black\") {\r\n            //         setMyStyle({\r\n            //             color: \"white\",\r\n            //             backgroundColor: \"black\",\r\n            //             border: \"1px solid white\",\r\n            //         })\r\n            //         setbtnText(\"Enable Light Mode\")\r\n            //     }\r\n            //     else {\r\n            //         setMyStyle({\r\n            //             color: \"black\",\r\n            //             backgroundColor: \"white\"\r\n\r\n            //         })\r\n            //         setbtnText(\"Enable Dark Mode\")\r\n            //     }\r\n            // }\r\n            return (\r\n                <div className=\"container my-4\" style={myStyle}>\r\n                    <div>\r\n                        <div className=\"accordion\" id=\"accordionExample\">\r\n                            <h2 className=\"my-3\">About Us</h2>\r\n                            <div className=\"accordion-item\">\r\n\r\n                                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                                    <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={myStyle}>\r\n                                    <strong>Analyse You Text</strong>   \r\n                                    </button>\r\n                                </h2>\r\n                                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                                    <div className=\"accordion-body\" style={myStyle}>\r\n                                        Use Instoried app & level up your content marketing game. Analyze emotions & impact score. From mood to sentiment & language, analyze your content and add a touch of empathy to it.\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"accordion-item\">\r\n                                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                                    <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={myStyle}>\r\n                                  <strong>chargeless</strong>  \r\n                                    </button>\r\n                                </h2>\r\n                                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                                    <div className=\"accordion-body\" style={myStyle}>\r\n                                    Free software (or libre software) is computer software distributed under terms that allow users to run the software for any purpose as well as to study.\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"accordion-item\">\r\n                                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                                    <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={myStyle}>\r\n                                    <strong>Browser Compactible</strong> \r\n                                    </button>\r\n                                </h2>\r\n                                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                                    <div className=\"accordion-body\" style={myStyle}>\r\n                                    The term browser compatibility refers to the ability of a certain website to appear fully functional on different browsers that are available in the market. This means that the website's HTML coding, as well as the scripts on that website, should be compatible to run on the browsers.\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {/* <button className=\"btn btn-primary my-4\" onClick={toggleStyle}>{btnText}</button> */}\r\n                </div>\r\n            )\r\n        }\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height:\"50px\"}}>\r\n        {props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong> : {props.alert.message}            </div>\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport NavBar from './components/NavBar';\nimport TextBox from './components/TextBox';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n// import About from './components/About';\n\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type,\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n\n  }\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark Mode has been Enabled\", \"success\");\n      document.title = \"Text-Editor-Dark-Home\"\n    }\n    else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has been Enabled\", \"success\");\n      document.title = \"Text-Editor-Home\"\n    }\n  }\n  return (\n    <>\n      <Router>\n        <NavBar title=\"Text-Editor\" aboutText=\"About Text-Editor \" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About mode={mode} />\n            </Route>\n            <Route exact path=\"/\">\n              <TextBox heading=\"Enter the text to Analyze\" mode={mode} showAlert={showAlert} />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}